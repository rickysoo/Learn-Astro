---
import DarkModeToggle from './DarkModeToggle.astro';
---

<nav class="bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm border-b border-slate-200/50 dark:border-slate-700/50 sticky top-0 z-50">
  <div class="container mx-auto px-6 py-4">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <svg width="32" height="32" viewBox="0 0 256 256" class="text-orange-500">
          <path fill="currentColor" d="M163.008,18.929c1.944,2.413,2.935,5.67,2.935,9.653c0,10.497-9.254,18.05-23.259,22.588c-28.707,9.284-52.07,26.199-52.07,26.199L185.925,108.12c0,0,32.8-32.8,32.8-60.8c0-15.464-8.001-26.857-17.613-33.493c-1.944-1.344-3.888-2.413-5.832-3.206c-15.464-6.341-32.025-2.413-32.025-2.413s-15.464,8.548-24.347,24.806c-1.944,3.482-4.413,7.789-6.357,12.372c-1.668,3.482-3.206,7.789-4.413,12.096c-0.825,2.413-1.344,4.826-1.668,7.239c-0.275,1.668-0.275,3.336-0.275,4.826c0,3.206,0.55,6.412,1.668,9.343c1.944,5.395,5.67,10.221,10.772,13.978c2.688,1.944,5.67,3.613,8.927,4.826c6.687,2.413,14.364,2.413,21.6,0.275c15.189-4.413,26.474-16.837,26.474-16.837l-69.486-69.486C18.654,18.929,163.008,18.929,163.008,18.929z"/>
          <path fill="#FF5D01" d="M94.8,177.2c-28.6,16.3-58.7-2.6-58.7-37.4V70.3c0-34.8,30.1-53.7,58.7-37.4L175.9,75c28.6,16.3,28.6,58.4,0,74.7L94.8,177.2z"/>
        </svg>
        <span class="text-2xl font-bold text-slate-800 dark:text-white">Learn Astro</span>
      </div>
      
      <div class="hidden md:flex items-center space-x-6">
        <a href="#concepts" class="text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white transition-colors focus-visible">Concepts</a>
        <a href="#demo" class="text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white transition-colors focus-visible">Demo</a>
        <a href="https://astro.build" class="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg transition-colors focus-visible" target="_blank" rel="noopener">Official Docs</a>
        <DarkModeToggle />
      </div>

      <!-- Mobile menu button and dark mode toggle -->
      <div class="md:hidden flex items-center space-x-2">
        <DarkModeToggle />
        <button 
          id="mobile-menu-button"
          class="p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800 text-slate-600 dark:text-slate-300 transition-colors" 
          aria-label="Toggle menu"
          aria-expanded="false"
        >
          <svg id="hamburger-icon" class="w-6 h-6 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
          <svg id="close-icon" class="w-6 h-6 hidden transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Mobile menu -->
    <div id="mobile-menu" class="md:hidden hidden border-t border-slate-200/50 dark:border-slate-700/50">
      <div class="px-6 py-4 space-y-3">
        <a href="#concepts" class="block text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white transition-colors py-2">Concepts</a>
        <a href="#demo" class="block text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white transition-colors py-2">Demo</a>
        <a href="https://astro.build" class="block bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg transition-colors text-center" target="_blank" rel="noopener">Official Docs</a>
      </div>
    </div>
  </div>
</nav>

<script>
  // Dark mode toggle functionality
  function initializeDarkMode() {
    const buttons = document.querySelectorAll('[data-theme-toggle]');
    const html = document.documentElement;
    
    // Get initial theme (dark by default)
    function getInitialTheme() {
      const saved = localStorage.getItem('theme');
      if (saved) return saved;
      // Default to dark mode, but respect system preference if explicitly light
      return window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
    }
    
    // Apply theme
    function applyTheme(theme) {
      if (theme === 'dark') {
        html.classList.add('dark');
      } else {
        html.classList.remove('dark');
      }
    }
    
    // Toggle theme
    function toggleTheme() {
      const current = html.classList.contains('dark') ? 'dark' : 'light';
      const next = current === 'dark' ? 'light' : 'dark';
      localStorage.setItem('theme', next);
      applyTheme(next);
    }
    
    // Initialize theme
    applyTheme(getInitialTheme());
    
    // Add event listeners to all theme toggle buttons
    buttons.forEach(button => {
      button.addEventListener('click', toggleTheme);
    });
  }

  // Mobile menu functionality
  function initializeMobileMenu() {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const hamburgerIcon = document.getElementById('hamburger-icon');
    const closeIcon = document.getElementById('close-icon');
    
    if (!menuButton || !mobileMenu) return;
    
    function toggleMenu() {
      const isOpen = mobileMenu.classList.contains('hidden');
      
      if (isOpen) {
        // Open menu
        mobileMenu.classList.remove('hidden');
        hamburgerIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
        menuButton.setAttribute('aria-expanded', 'true');
      } else {
        // Close menu
        mobileMenu.classList.add('hidden');
        hamburgerIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        menuButton.setAttribute('aria-expanded', 'false');
      }
    }
    
    // Close menu when clicking on menu links
    const menuLinks = mobileMenu.querySelectorAll('a');
    menuLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
        hamburgerIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        menuButton.setAttribute('aria-expanded', 'false');
      });
    });
    
    // Add click event to menu button
    menuButton.addEventListener('click', toggleMenu);
  }

  // Initialize functions
  function initialize() {
    initializeDarkMode();
    initializeMobileMenu();
  }

  // Initialize when DOM is ready or immediately if already loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }
</script>